#!/usr/bin/php
<?php

// Use http_proxy environment variable
if ($proxy = str_replace("http://", "tcp://", getenv('http_proxy')))
	stream_context_set_default(array('http' => array('proxy' => $proxy,'request_fulluri' => true)));

$quotes = new BashOrgQuotes();
$quote = $quotes->getQuote();
echo $quote."\n";

/**
 * Quotes class
 *
 * A generic class for fetching quotes
 */
abstract class Quotes {

	private $quotefile = ''; // Quote cache location
	private $quotes = array(); // Quotes

/**
 * Class constructur
 *
 * Opens the quote cache.
 */
	function __construct() {
    if (file_exists(getenv('HOME')."/.bashqdb")) // Clean up old style cache
      unlink(getenv('HOME')."/.bashqdb");

		$this->quotefile = sys_get_temp_dir() . PATH_SEPARATOR . "bashquote_cache";
		$this->quotefp = fopen($this->quotefile,"c+");
		// Only one instance accessing the cache at a time
		if (!flock($this->quotefp, LOCK_EX))
			throw new Exception('Could not lock quote cache');
		$this->cacheRead();
	}

/**
 * Class destructor
 *
 * Fills the cache (if needed), and writes it back to disk.
 */
	function __destruct() {
		$this->fillIfEmpty();
		$this->cacheWrite();
		flock($this->quotefp, LOCK_UN);
		fclose($this->quotefp);
	}

	/**
	 * Read the cache contents
	 */
	function cacheRead() {
		$cache = unserialize(file_get_contents($this->quotefile));
		if ($cache) {
			$this->quotes = $cache;
		} else {
			//throw new Exception('Could not read quote cache');
			$this->quotes = array();
		}
	}

	/**
	 * Write the cache contents to disk
	 */
	function cacheWrite() {
		if (FALSE === file_put_contents($this->quotefile, serialize($this->quotes))) {
			throw new Exception('Could not write quote cache');
		}
	}

	/**
	 * Checks if the cache is empty, and if so, fills it.
	 */
	function fillIfEmpty() {
		if (!$this->quotes)
			$this->quotes = $this->fetchQuotes();
	}

	/**
	 * Get a single quote
	 */
	function getQuote() {
		$quote = array_pop($this->quotes);
		if (!$quote) { // This is not good enough error handling
			$this->fillIfEmpty();
			$quote = array_pop($this->quotes);
		}
		return $quote;
	}

}

/**
 * Class for handling quotes from bash.org
 *
 * Implementation of class Quotes
 */
class BashOrgQuotes extends Quotes {

	/**
	 * Fetch and parse a batch of random quotes from bash.org
	 */
	function fetchQuotes() {
		libxml_use_internal_errors(TRUE);
		$doc = new DOMDocument;
    $doc->loadHTMLFile("http://bash.org/?random1");
		$xpath = new DOMXPath($doc);
    $elements = $xpath->query('//p[@class="qt"]');
		$quotes = array();
		foreach ($elements as $element) {
			$quote = $element->textContent;
			$quote = html_entity_decode($quote);
			$quote = str_replace("<br />", "\n", $quote);
			$quotes[] = $quote;
		}
		return $quotes;
	}
}

?>
